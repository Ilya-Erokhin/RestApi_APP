from db import db


class ItemModel(db.Model):

# __tablename__ = 'items': Это специальный атрибут класса ItemModel, который указывает на имя таблицы в базе данных, к которой будет привязан этот класс.
# В нашем случае, каждый экземпляр ItemModel будет представлять одну запись в таблице с именем 'items'.
    __tablename__ = 'items'

# Определение атрибутов (столбцов) элемента товара:
    # id - Это Primaty Key, в данном случае это целое число (Integer)
    id = db.Column(db.Integer, primary_key=True)
# name: Это имя товара, представленное строкой (максимальная длина 80 символов, db.String(80)).
    name = db.Column(db.String(80))
# price: Это цена товара, представленная числом с плавающей запятой с точностью до двух знаков после запятой (db.Float(precision=2)).
    price = db.Column(db.Float(precision=2))

#Связь с таблицей "stores":
# store_id: Это Foreign Key для связи с таблицей "stores".
# Таким образом, каждый элемент товара будет привязан к определенному магазину.
# Тип этого атрибута - целое число (db.Integer).
    store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))

# store: Это отношение (relationship) с таблицей "stores".
# Это позволяет нам получить доступ к информации о магазине, к которому принадлежит данный элемент товара.
# С помощью этого отношения, мы можем, например, получить доступ к имени магазина, связанного с конкретным элементом товара.
# StoreModel - Имя класса, на который мы ссылаемся
    store = db.relationship('StoreModel')

# Это конструктор класса ItemModel, который вызывается при создании нового объекта этого класса.
# Когда мы создаем новый элемент товара, мы передаем ему его имя, цену и идентификатор магазина (store_id).
# Конструктор принимает эти значения и инициализирует атрибуты объекта, чтобы сохранить переданную информацию.
    def __init__(self, name, price, store_id):
        self.name = name
        self.price = price
        self.store_id = store_id

# json(self): Это метод, который возвращает словарь с данными об элементе товара.
# Мы используем этот метод для преобразования объекта ItemModel в формат JSON,
    # который может быть отправлен или получен через API или сохранен в базе данных.
    def json(self):
        return {'name': self.name, 'price': self.price}

# @classmethod
# Это специальный декоратор Python, который превращает метод класса в метод, который можно вызывать без создания экземпляра класса.
# В данном случае, мы используем @classmethod для создания метода, который будет искать элемент товара по его имени (name).

# find_by_name(cls, name):
# Это классовый метод (classmethod), который выполняет запрос к базе данных для поиска элемента товара по его имени.
# Он принимает имя в качестве аргумента и возвращает первый элемент товара с соответствующим именем, если такой элемент найден.
# cls - ItemModel
    @classmethod
    def find_by_name(cls, name):
        return cls.query.filter_by(name=name).first()


    # save_to_db(self):
    # Это метод, который сохраняет текущий объект ItemModel в базу данных.
    # Он добавляет текущий элемент товара в текущую сессию базы данных (db.session) и затем сохраняет изменения в базе данных с помощью db.session.commit()
    def save_to_db(self):
        db.session.add(self)
        db.session.commit()


    # delete_from_db(self):
    # Это метод, который удаляет текущий объект ItemModel из базы данных.
    # Он удаляет текущий элемент товара из текущей сессии базы данных (db.session) и сохраняет изменения с помощью db.session.commit().
    def delete_from_db(self):
        db.session.delete(self)
        db.session.commit()